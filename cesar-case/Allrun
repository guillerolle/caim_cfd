#!/bin/bash

runCommand()
{
    if [ "$1" == "mpirun" ]; then sol="$4"; else sol="$1"; fi
    sol=$(basename -- "$sol")
    sol="${sol%.*}"
    if [ -f log."$sol" ]; then rm log."$sol"; fi
    "$@" 1> >(tee -a log."$sol") 2> >(tee -a log."$sol" >&2)
    err=$?
    if [ ! $err -eq 0 ]; then exit $err; fi
}

# Unset and source bashrc: recomiendo usar las variables estandar de FOAM!
# Esto lo hacía con una variable interna por si tratabas de correr sin tener
# la misma versión en el source de FOAM del bash
#FOAMDIR="/home/guillermo/OpenFOAM/guillermo-v1906"
#source "$FOAM_ETC/config.sh/unset" 2> /dev/null
source "$FOAM_ETC/bashrc"

# Copy mesh from mesh case dir if available
MESHDIR="../meshCase"
if [ -f "$MESHDIR"/constant/polyMesh/faces ]
then
    rm -r constant/polyMesh 2> /dev/null
    cp -r "$MESHDIR"/constant/polyMesh constant/polyMesh
elif [ ! -f constant/polyMesh/faces ]
then
    echo "Fatal error: Unable to find mesh in directory $MESHDIR" 1>&2
    exit 1
fi

# Update patch name and type
runCommand createPatch -overwrite

# Run application in parallel
runCommand decomposePar -force -copyZero

# Create near wall layers to avoid bad BL resolution
runCommand mpirun -n 4 snappyHexMesh -parallel -overwrite -dict system/snappyHexMeshDict.layers

# Update patch name and type
runCommand mpirun -n 4 createPatch -parallel -overwrite
# Update BC
runCommand mpirun -n 4 changeDictionary -parallel 

# Run case
runCommand mpirun -n 4 pimpleFoam -parallel

